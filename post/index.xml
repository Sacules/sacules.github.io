<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kernelashes</title>
    <link>https://sacules.github.io/post/</link>
    <description>Recent content in Posts on kernelashes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Sep 2019 20:02:52 -0300</lastBuildDate>
    
	<atom:link href="https://sacules.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Modern Vim Setup, Part 1: Language Servers</title>
      <link>https://sacules.github.io/post/a-modern-vim-setup/</link>
      <pubDate>Sun, 29 Sep 2019 20:02:52 -0300</pubDate>
      
      <guid>https://sacules.github.io/post/a-modern-vim-setup/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Lemonbar</title>
      <link>https://sacules.github.io/post/how-to-lemonbar/</link>
      <pubDate>Fri, 14 Jun 2019 11:09:03 -0300</pubDate>
      
      <guid>https://sacules.github.io/post/how-to-lemonbar/</guid>
      <description>In the huge world of ricing, there are plenty of options when it comes to bars and panels, particularly for unix-like systems: polybar, dzen, xfce-panel, tint2, etc. In particular, lemonbar is one of the most minimal ones, since it only requires text to be piped into it in order to display a bar. Thus getting useful information, like CPU usage or the current time, is left at the hands of the user - scripting time!</description>
    </item>
    
    <item>
      <title>Adventures in Go: Writing a TUI, Part 1 - tview</title>
      <link>https://sacules.github.io/post/adventures-go-tui-1/</link>
      <pubDate>Mon, 11 Feb 2019 19:02:56 -0300</pubDate>
      
      <guid>https://sacules.github.io/post/adventures-go-tui-1/</guid>
      <description>I&#39;ve been coding in Go quite often for the last new months, and it has certainly become my favorite programming language. So far I&#39;ve made a small music tag editor, a variation of a hangman game, a little music scheduler, and was trying to build a dotfile manager but that didn&#39;t go too far.
And in the process I&#39;ve actually learned a lot about making TUIs (Terminual User Interfaces), which prompted me to write this article.</description>
    </item>
    
    <item>
      <title>Void Linux Journey, Part I: Automounting</title>
      <link>https://sacules.github.io/post/void-journey-i/</link>
      <pubDate>Fri, 28 Dec 2018 21:52:01 -0300</pubDate>
      
      <guid>https://sacules.github.io/post/void-journey-i/</guid>
      <description>I&#39;m not sure how I ended up using an obscure GNU/Linux distro such as Void - after finally managing to install Arch with XFCE, and realizing that all the hard work was only beginning, I deleted and kept using MX Linux for a few months more. Then winter holidays came, and thought it was finally time to stop admiring all those wonderful setups from r/unixporn and make my own!
Having already used Void before on a VM and a cheap netbook, I felt it was the right choice for my main OS - something simple to install and use on a dialy basis, with up-to-date packages, and that had a minimalistic design.</description>
    </item>
    
    <item>
      <title>How to dwm</title>
      <link>https://sacules.github.io/post/how-to-dwm/</link>
      <pubDate>Sun, 05 Aug 2018 03:00:42 -0300</pubDate>
      
      <guid>https://sacules.github.io/post/how-to-dwm/</guid>
      <description>My experience with dwm started as an interest in tiling window managers - had previously tried i3, but never got comfortable with the keybindings. When I found about the whole suckless project, the idea of a simpler WM that offered tiling and was very light made me interested in trying it on an older netbook I had.
Since I had no clue on how to patch it, found an interesting fork on github that had some patches I was interested in.</description>
    </item>
    
  </channel>
</rss>